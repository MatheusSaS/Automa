generator kysely {
  provider     = "prisma-kysely"
  output       = "."
  enumFileName = "enums.ts"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_PRISMA_URL_NON_POOLING")
}

model Product {
  id           String  @id @default(uuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  categorieId  String?
  categorie    Categorie?    @relation(fields: [categorieId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  price        Float

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([userId, id])
}

model Categorie {
  id           String  @id @default(uuid())
  userId       String
  name         String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product[]
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([userId, id])

}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Products Product[]

  Categories Categorie[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}